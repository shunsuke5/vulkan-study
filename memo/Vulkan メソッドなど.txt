vk::Instance
    std::vector<vk::PhysicalDevice> enumratePhysicalDevices()
    　→ 物理デバイスの一覧を返す。

vk::PhysicalDevice
    vk::Device createDeviceUnique(vk::DeviceCreateInfo)
    　→ 物理デバイスから論理デバイスを作成する。

    std::vector<...> getQueueFamilyProperties()
    　→ ある物理デバイスの各キューファミリの情報を返す。
	
	getMemoryProperties()
	　→ デバイスメモリの種類を取得する。
	
	vk::SurfaceCapabilitiesKHR getSurfaceCapabilitiesKHR(vk::SurfaceKHR)
	　→ 物理デバイスが対象のサーフェイスを扱う能力の情報を取得する。
	
	vector<vk::SurfaceFormatKHR> getSurfaceFormatsKHR(vk:SurfaceKHR)
	　→ サーフェイスの画像フォーマットを取得する。
	
	vector<vk::PresentModeKHR> getSurfacePresentModesKHR(vk::SurfaceKHR)
	　→ サーフェイスの表示処理のモードを取得する。
	
	uint32_t getSurfaceSupportKHR(uint32_t queueFamilyIndex, vk::Surface)
	　→ ある物理デバイスのあるキューが、あるサーフェイスへのプレゼンテーションを行えるかどうかを取得する。

vk::Device
    vk::CommandPool createCommandPool()
    　→ コマンドプールを作成する。

    vector<vk::CommandBuffer> allocateCommandBuffers()
    　→ コマンドバッファを作成する。

    vk::Fence createFence(vk::FenceCreateInfo)
    　→ フェンスオブジェクトを作成する。

    vk::Semaphore createSemaphore(vk::SemaphoreCreateInfo)
    　→ セマフォオブジェクトを作成する。

    vk::Result waitForFences(vk::Device, vk::Bool32 waitAll, uint64_t timeout)
    　→ シグナル状態になるまで待機する。
    　　正常に終了すればvk::Result::eSuccess,timeoutを超えても処理が終わらなかった場合はvk::Result::eTimeoutを返す。
    　　waitAll = 待機方法。VK_TRUEは全てのフェンスが、VK_FALSEはどれか一つのフェンスがシグナル状態になるまで待機。
    　　timeout = 最大待機時間。ナノ秒で指定する。

    vk::Result resetFences(vk::Device)
    　→ 非シグナル状態にリセットする。
	
	allocateMemory()
	　→ デバイスメモリを確保する。
	
	vk::MemoryRequirements getImageMemoryRequirements(vk::Image)
	　→ イメージに対してどんな種類のメモリがどれだけ必要かの情報を取得する。
	
	bindImageMemory(vk::Image, vk::DeviceMemory, vk::DeviceSize memoryOffset)
	　→ イメージにメモリをバインドする。第三引数には「確保したメモリの先頭から何バイト目を使用するか」を指定する。

	createRenderPass()
	　→ レンダーパスを作成する。
	
	createFramebuffer()
	　→ フレームバッファを作成する。
	
	mapMemory(vk::ImageMemory, vk::DeviceSize offset, vk::DeviceSize size)
	　→ アプリケーション側のアドレス空間上にマップする。
	　　offsetはデバイスメモリのマップしたい場所のオフセット、sizeはマップするサイズを指定する。
	
	vk::ResultValue acquireNextImageKHR(vk::SwapchainKHR, uint64_t timeout, vk::Semaphore, vk::Fence)
	　→ 次に描画を行うべきイメージの取得、
	　　描画された後に表示されても良いように準備する処理を行う。

vk::DeviceCreateInfo
    vk::DeviceQueueCreateInfo pQueueCreateInfos
    　→ デバイスに対するキューの情報を持つ構造体の先頭アドレスを格納する。

    QueueCreateInfoCount
    　→ 配列の要素数を指定する。

vk::Queue
    submit({ vk::SubmitInfo }, vk::Fence?)
    　→ GPUに命令を送信する。

    waitIdle()
    　→ キューが空になるまで待機する。

vk::QueueFamilyProperties
    queueFlags
    　→ キューが行える処理をビットで表す。

vk::QueueFlagBits
    eGraphics
    　→ 描画が可能であることを表す。

    eCompute
    　→ 計算が可能であることを表す。

    eTransfer
    　→ データ移動が可能であることを表す。

vk::DeviceQueueCreateInfo
    queueFamilyIndex
    　→ キューの欲しいキューファミリのインデックスを表す。

    queueCount
    　→ そのキューファミリからいくつのキューが欲しいかを表す。

    pQueuePriorities
    　→ キューのタスク実行の優先度を表すfloat値配列を指定する。

vk::CommandPoolCreateInfo
    uint32_t queueFamilyIndex
    　→ コマンドバッファを送信する時に対象とするキューを指定する。

vk::CommandBufferAllocateInfo
    vk::CommandPool commandPool
    　→ コマンドプールを指定する。

    uint32_t commandBufferCount
    　→ 作るコマンドバッファの数を指定する。
	
vk::CommandBuffer
	begin(vk::CommandBufferBeginInfo)
	　→ コマンド記録を開始する。
	
	end()
	　→ コマンド記録を終了する。
	
	beginRenderPass(vk::RenderPassBeginInfo, vk::SubpassContents)
	　→ レンダーパスの開始を行うコマンドを記録する。
	
	endRenderPass()
	　→ レンダーパスの終了を行うコマンドを記録する。
	
	draw(uint32_t vertexCnt, uint32_t instanceCnt, uint32_t firstVertex, uint32_t firstInstance)
	　→ 描画を行う。vertexCntは頂点の数、instanceCntはインスタンスの数、
	　　firstVertex,firstInstanceにはそれぞれ頂点とインスタンスのオフセットを指定する。
	　　例えば頂点の情報が2000個分あり、前の1000頂点が物体Aのモデルデータを表し、
	　　残る1000頂点が物体Bのモデルデータを表すといった場合、
	　　firstVertexには1000を渡して、物体Bのモデル描画に使える、といった感じのもの。

vk::SubmitInfo = コマンドバッファの送信に関わる情報を指定する。
    commandBufferCount
    　→ 送信するコマンドバッファの数を指定する。

    pCommandBuffers
    　→ 送信するコマンドバッファの配列へのポインタを指定する。

    signalSemaphoreCount
    　→ コマンド完了時にシグナル状態にするセマフォの数。

    pSignalSemaphores
    　→ コマンド完了時にシグナル状態にするセマフォの配列アドレス。

    waitSemaphoreCount
    　→ コマンド完了まで待機するセマフォの数？

    pWaitSemaphores
    　→ コマンド完了まで待機するセマフォの配列アドレス？

vk::FenceCreateInfo
    flags
    　→ 状態を設定する。vk::FenceCreateFlagBits::eSignaledを設定すると、初期状態がシグナル状態となる。

vk::Image
	imageType
	　→ 次元を指定する。
	
	extent
	　→ サイズを指定する。
	
	mipLevels
	
	arrayLayers
	
	format
	　→ 画素のフォーマットの種類(どのように各ピクセルが色を保存しているかの情報)を指定する。
	
	tiling
	
	initialLayout
	
	usage
	
	sharingMode
	
	samples
	
vk::PhysicalDeviceMemoryProperties

vk::MemoryRequirements
	size
	　→ 必要なメモリサイズ。
	
	memoryTypeBits
	　→ 使用可能なメモリの種類。
	
vk::MemoryAllocateInfo

vk::AttachmentReference
	attachment
	　→ 何番目のアタッチメントなのかを指定する。
	
vk::PipelineShaderStageCreateInfo
	pName
	　→ 開始する関数名を指定する。
	
vk::ImageViewCreateInfo
	image
	　→ イメージビューが指すイメージを指定する。
	
	viewType
	　→ 次元を指定する。
	
	format
	　→ フォーマットを指定する。
	
	viewType
	
	components
	
	subresourceRange
	
vk::SwapchainCreateInfoKHR
	surface
	　→ 画像の表示先となるサーフェイスを指定する。
	
	minImageCount
	　→ スワップチェーンが扱うイメージの数。
	　　メモの方で「描いている途中」が見えないようにするため、2枚以上のキャンバスを用意して...
	　　といった記述をしたが、そのキャンバスの数。getSurfaceCapabilitiesKHRで得られる
	　　minImageCount～maxImageCountの間の数なら何枚でも問題ないが、
	　　最小値 + 1 を指定するとよい？
	
	imageFormat, imageColorSpace
	　→ スワップチェーンの画像フォーマットを表す。
	　　必ずgetSurfaceFormatsKHRが返した配列に含まれる組み合わせでなければならない。
	
	imageExtent
	　→ スワップチェーンの画像サイズを表す。getSurfaceCapabilitiesKHRで得られる
	　　minImageExtent～maImageExtentの間でなければならない。
	
	preTransform
	　→ 表示時の画面反転、画面回転などのオプションを表す。
	　　getSurfaceCapabilitiesKHRの戻り値に依存し、
	　　supportedTransformsでサポートされている中に含まれるものでなければならない。
	　　currentTransformを設定すると現在の画面設定が反映されるため無難である。
	
	presentMode
	　→ 表示処理のモードを示す。
	　　getSurfacePresentModesKHRの戻り値の配列に含まれる値でないといけない。
	
